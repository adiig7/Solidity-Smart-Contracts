// Deployed to Kovan Network: 0xDB8C6F50e13552f0478F4A1D424f49b8786e17b0


// This smart contract is the implementation of ERC20 token


//SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

interface IERC20{
    function totalSupply() external view returns(uint);

    function balanceOf(address account) external view returns(uint);

    function transfer(address recipient, uint amount) external returns(bool);

    function allowance(address owner, address spender) external view returns(uint);

    function approve(address spender, uint amount) external returns(bool);

    function transferFrom(address spender, address recipient, uint amount) external returns(bool);

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

contract ERC20 is IERC20{
    uint public total;
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowances;
    string public name = "Aditya Gupta";
    string public symbol = "adiig7";
    uint8 public decimals = 18;

    constructor(uint _total){
        total = _total;
    }

    function totalSupply() external view returns(uint){
        return total;
    }

    function transfer(address recipient, uint amount) external returns(bool){
        balances[msg.sender] -= amount;
        balances[recipient] += amount;
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }

    function balanceOf(address account) external view returns(uint){
        return balances[account];
    }

     function allowance(address owner, address delegate) public view returns (uint) {
        return allowances[owner][delegate];
    }

    function approve(address spender, uint amount) external returns(bool){
        allowances[msg.sender][spender] += amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint amount) external returns(bool){
        allowances[sender][msg.sender] -= amount;
        balances[msg.sender] -= amount;
        balances[recipient] += amount;
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }

    function mint(uint amount) external{
        balances[msg.sender] += amount;
        total += amount;
        emit Transfer(address(0), msg.sender, amount);
    }

    function burn(uint amount) external{
        balances[msg.sender] -= amount;
        total -= amount;
        emit Transfer(msg.sender, address(0), amount);
    }
}
